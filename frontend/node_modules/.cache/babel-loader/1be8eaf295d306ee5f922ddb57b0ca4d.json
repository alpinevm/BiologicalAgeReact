{"ast":null,"code":"var _jsxFileName = \"/Users/alpinevm/Development/BiologicalAgeReact/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { QUESTIONS } from './questions';\nimport UserForm from './user';\nexport default function App() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showEndScreen, setEndScreen] = useState(false);\n  const [showQuestions, setShowQuestions] = useState(false);\n  const [ageDelta, setAgeDelta] = useState(0);\n  const [user, setUser] = useState({});\n  useEffect(() => {\n    console.log(user);\n  }, [user]);\n\n  const handleAnswerOptionClick = questionAgeDelta => {\n    setAgeDelta(ageDelta + questionAgeDelta);\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < QUESTIONS.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setEndScreen(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 3\n    }\n  }, !showQuestions ? /*#__PURE__*/React.createElement(UserForm, {\n    setUser: setUser,\n    setShowQuestions: setShowQuestions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 24\n    }\n  }) : showEndScreen ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, \"Your biological age is \", Number.parseInt(user.age) + ageDelta) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 8\n    }\n  }, \"Question \", currentQuestion + 1, \"/\", QUESTIONS.length)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, QUESTIONS[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 6\n    }\n  }, QUESTIONS[currentQuestion].answerOptions.map(answerOption => /*#__PURE__*/React.createElement(\"button\", {\n    ontouchmove: true,\n    onClick: () => handleAnswerOptionClick(answerOption.ageDelta),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 8\n    }\n  }, answerOption.answerText)))));\n}","map":{"version":3,"sources":["/Users/alpinevm/Development/BiologicalAgeReact/src/App.js"],"names":["React","useState","useEffect","QUESTIONS","UserForm","App","currentQuestion","setCurrentQuestion","showEndScreen","setEndScreen","showQuestions","setShowQuestions","ageDelta","setAgeDelta","user","setUser","console","log","handleAnswerOptionClick","questionAgeDelta","nextQuestion","length","Number","parseInt","age","questionText","answerOptions","map","answerOption","answerText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,QAAP,MAAqB,QAArB;AAEA,eAAe,SAASC,GAAT,GAAe;AAC7B,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM,CAACO,aAAD,EAAgBC,YAAhB,IAAgCR,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACfc,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;;AAIA,QAAMI,uBAAuB,GAAIC,gBAAD,IAAsB;AACrDN,IAAAA,WAAW,CAACD,QAAQ,GAAGO,gBAAZ,CAAX;AAEA,UAAMC,YAAY,GAAGd,eAAe,GAAG,CAAvC;;AACA,QAAIc,YAAY,GAAGjB,SAAS,CAACkB,MAA7B,EAAqC;AACpCd,MAAAA,kBAAkB,CAACa,YAAD,CAAlB;AACA,KAFD,MAEO;AACNX,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA;AACD,GATD;;AAWA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,CAACC,aAAD,gBAAmB,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAEK,OAAnB;AAA4B,IAAA,gBAAgB,EAAEJ,gBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnB,GAEDH,aAAa,gBACZ;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCACyBc,MAAM,CAACC,QAAP,CAAgBT,IAAI,CAACU,GAArB,IAA4BZ,QADrD,CADY,gBAKZ,uDACC;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgBN,eAAe,GAAG,CAAlC,OAAsCH,SAAS,CAACkB,MAAhD,CADD,CADD,eAIC;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgClB,SAAS,CAACG,eAAD,CAAT,CAA2BmB,YAA3D,CAJD,CADD,eAOC;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEtB,SAAS,CAACG,eAAD,CAAT,CAA2BoB,aAA3B,CAAyCC,GAAzC,CAA8CC,YAAD,iBAC7C;AAAQ,IAAA,WAAW,MAAnB;AAAoB,IAAA,OAAO,EAAE,MAAMV,uBAAuB,CAACU,YAAY,CAAChB,QAAd,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoFgB,YAAY,CAACC,UAAjG,CADA,CADF,CAPD,CARF,CADD;AA0BA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { QUESTIONS } from './questions';\nimport UserForm from './user';\n\nexport default function App() {\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\tconst [showEndScreen, setEndScreen] = useState(false);\n\tconst [showQuestions, setShowQuestions] = useState(false);\n\tconst [ageDelta, setAgeDelta] = useState(0);\n\tconst [user, setUser] = useState({});\n\n\tuseEffect(() => {\n\t\tconsole.log(user);\n\t}, [user]);\n\n\tconst handleAnswerOptionClick = (questionAgeDelta) => {\n\t\tsetAgeDelta(ageDelta + questionAgeDelta);\n\n\t\tconst nextQuestion = currentQuestion + 1;\n\t\tif (nextQuestion < QUESTIONS.length) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t} else {\n\t\t\tsetEndScreen(true);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className='app' >\n\t\t\t{!showQuestions ? ( <UserForm setUser={setUser} setShowQuestions={setShowQuestions}/> ) : (\n\t\t\t\n\t\t\tshowEndScreen ? (\n\t\t\t\t<div className='score-section'>\n\t\t\t\t\tYour biological age is {Number.parseInt(user.age) + ageDelta}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t<span>Question {currentQuestion + 1}/{QUESTIONS.length}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='question-text'>{QUESTIONS[currentQuestion].questionText}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t{QUESTIONS[currentQuestion].answerOptions.map((answerOption) => (\n\t\t\t\t\t\t\t<button ontouchmove onClick={() => handleAnswerOptionClick(answerOption.ageDelta)}>{answerOption.answerText}</button>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)\n\t\t\t)}\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}